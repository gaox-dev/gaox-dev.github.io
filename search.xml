<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Flutter配置常见错误</title>
    <url>/project/2021/04/15/Flutter/</url>
    <content><![CDATA[<h1 id="Flutter配置常见错误"><a href="#Flutter配置常见错误" class="headerlink" title="Flutter配置常见错误"></a>Flutter配置常见错误</h1><h2 id="1-1-Could-not-determine-the-dependencies-of-task-app-compileDebugJavaWithJavac"><a href="#1-1-Could-not-determine-the-dependencies-of-task-app-compileDebugJavaWithJavac" class="headerlink" title="1.1 Could not determine the dependencies of task :app:compileDebugJavaWithJavac"></a>1.1 Could not determine the dependencies of task :app:compileDebugJavaWithJavac</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Could not determine the dependencies of task <span class="string">&#x27;:app:compileDebugJavaWithJavac&#x27;</span>.</span><br><span class="line">&gt; Could not resolve all task dependencies <span class="keyword">for</span> configuration <span class="string">&#x27;:app:debugCompileClasspath&#x27;</span>.</span><br><span class="line">   &gt; Could not find io.flutter:x86_64_debug:<span class="number">1.0</span><span class="number">.0</span><span class="number">-91</span>c9fc8fe011352879e3bb6660966eafc0847233.</span><br><span class="line">     Required by:</span><br><span class="line">         project :app</span><br><span class="line">   &gt; Could not find io.flutter:x86_debug:<span class="number">1.0</span><span class="number">.0</span><span class="number">-91</span>c9fc8fe011352879e3bb6660966eafc0847233.</span><br><span class="line">     Required by:</span><br><span class="line">         project :app</span><br><span class="line">   &gt; Could not find io.flutter:flutter_embedding_debug:<span class="number">1.0</span><span class="number">.0</span><span class="number">-91</span>c9fc8fe011352879e3bb6660966eafc0847233.</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://blog.csdn.net/mr_hmgo/article/details/106674679">https://blog.csdn.net/mr_hmgo/article/details/106674679</a></p>
</blockquote>
<span id="more"></span> 
<h2 id="1-2-Mac-Flutter-doctor-✗-Unable-to-locate-Android-SDK"><a href="#1-2-Mac-Flutter-doctor-✗-Unable-to-locate-Android-SDK" class="headerlink" title="1.2 Mac, Flutter doctor, ✗ Unable to locate Android SDK."></a>1.2 Mac, Flutter doctor, ✗ Unable to locate Android SDK.</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//简单的解决办法:</span><br><span class="line">flutter config --android-sdk <span class="variable">$HOME</span>/Library/Android/sdk</span><br></pre></td></tr></table></figure>



<h2 id="1-3-无法Pod安装时"><a href="#1-3-无法Pod安装时" class="headerlink" title="1.3 无法Pod安装时"></a>1.3 无法Pod安装时</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm ios/Podfile.lock</span><br><span class="line">flutter build ios </span><br></pre></td></tr></table></figure>



<h2 id="1-4-Exception：“failed-to-set-registerPlugins”"><a href="#1-4-Exception：“failed-to-set-registerPlugins”" class="headerlink" title="1.4 Exception：“failed to set registerPlugins”"></a>1.4 Exception：“failed to set registerPlugins”</h2><p>打开 ios目录下的AppDelegate.swift文件</p>
<p>添加</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> flutter_downloader</span><br></pre></td></tr></table></figure>

<p>Bool 回调添加</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">FlutterDownloaderPlugin</span>.setPluginRegistrantCallback(registerPlugins)</span><br></pre></td></tr></table></figure>

<p>尾部添加</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">registerPlugins</span>(<span class="params">registry</span>: <span class="type">FlutterPluginRegistry</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">!</span>registry.hasPlugin(<span class="string">&quot;FlutterDownloaderPlugin&quot;</span>)) &#123;</span><br><span class="line">       <span class="type">FlutterDownloaderPlugin</span>.register(with: registry.registrar(forPlugin: <span class="string">&quot;FlutterDownloaderPlugin&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main.dart完整代码</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> Flutter</span><br><span class="line"><span class="keyword">import</span> flutter_downloader</span><br><span class="line"></span><br><span class="line"><span class="keyword">@UIApplicationMain</span></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">class</span> <span class="title class_">AppDelegate</span>: <span class="title class_">FlutterAppDelegate</span> &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">application</span>(</span><br><span class="line">    <span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>,</span><br><span class="line">    <span class="params">didFinishLaunchingWithOptions</span> <span class="params">launchOptions</span>: [<span class="type">UIApplication</span>.<span class="params">LaunchOptionsKey</span>: <span class="keyword">Any</span>]<span class="operator">?</span></span><br><span class="line">  ) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="type">GeneratedPluginRegistrant</span>.register(with: <span class="keyword">self</span>)</span><br><span class="line">    <span class="type">FlutterDownloaderPlugin</span>.setPluginRegistrantCallback(registerPlugins)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.application(application, didFinishLaunchingWithOptions: launchOptions)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">registerPlugins</span>(<span class="params">registry</span>: <span class="type">FlutterPluginRegistry</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">!</span>registry.hasPlugin(<span class="string">&quot;FlutterDownloaderPlugin&quot;</span>)) &#123;</span><br><span class="line">       <span class="type">FlutterDownloaderPlugin</span>.register(with: registry.registrar(forPlugin: <span class="string">&quot;FlutterDownloaderPlugin&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-5-XCode-archive-error-‘No-such-module-flutter-downloader’-when-using-AppDelegate-swift"><a href="#1-5-XCode-archive-error-‘No-such-module-flutter-downloader’-when-using-AppDelegate-swift" class="headerlink" title="1.5 XCode archive error ‘No such module flutter_downloader’ when using AppDelegate.swift"></a>1.5 XCode archive error ‘No such module flutter_downloader’ when using AppDelegate.swift</h2><p>None of the above solutions worked for me so this is how I solved mine:</p>
<ol>
<li>Run <code>flutter clean</code></li>
<li>Open the project folder navigate to ios directory and delete the ‘Pods’ folder</li>
<li>Run <code>flutter pub get</code></li>
<li>Open terminal and navigate to ios directory in your project folder and run <code>pod install</code></li>
<li>When done, open ‘Runner.xcworkspace’</li>
<li>In Xcode, clean the build folder by going to Product &gt; Clean Build Folder</li>
<li>Build the project (Product &gt; Build) and everything should work fine.</li>
</ol>
<h2 id="1-6-Encountered-error-while-building-for-device"><a href="#1-6-Encountered-error-while-building-for-device" class="headerlink" title="1.6 Encountered error while building for device."></a>1.6 Encountered error while building for device.</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">warning: The iOS deployment target <span class="string">&#x27;IPHONEOS_DEPLOYMENT_TARGET&#x27;</span> is <span class="built_in">set</span> to 8.0, but the range of</span><br><span class="line">    supported deployment target versions is 9.0 to 14.0.99. (<span class="keyword">in</span> target <span class="string">&#x27;JPush&#x27;</span> from project <span class="string">&#x27;Pods&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>先用Xcode编译运行一遍。修改target deployment version</p>
</li>
<li><p>Xcode编译出现错误，需要用Xcode清除错后才行。</p>
</li>
</ul>
<h2 id="1-7-“Waiting-for-another-flutter-command-to-…”"><a href="#1-7-“Waiting-for-another-flutter-command-to-…”" class="headerlink" title="1.7 “Waiting for another flutter command to …”"></a>1.7 “Waiting for another flutter command to …”</h2><p>执行 <code>Flutter</code> 包管理相关命令时有可能遇到 <code>Waiting for another flutter command to release the startup lock...</code> 这样的错误，可尝试杀死所有的 <code>dart</code> 进程解决：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// Linux</span><br><span class="line">killall -9 dart</span><br><span class="line"></span><br><span class="line">// Windows</span><br><span class="line">taskkill /F /IM dart.exe</span><br><span class="line"></span><br><span class="line">// Mac</span><br><span class="line"><span class="built_in">rm</span> ~/flutter/bin/cache/lockfile</span><br></pre></td></tr></table></figure>



<h2 id="1-8-Command-PhaseScriptExecution-failed-with-a-nonzero-exit-code"><a href="#1-8-Command-PhaseScriptExecution-failed-with-a-nonzero-exit-code" class="headerlink" title="1.8 Command PhaseScriptExecution failed with a nonzero exit code"></a>1.8 Command PhaseScriptExecution failed with a nonzero exit code</h2><p> <strong>Xcode报错</strong>：“Command PhaseScriptExecution failed with a nonzero exit code”</p>
<p><strong>Android Studio报错</strong>：“Could not build the precompiled application for the device .Error launching application on xx.”</p>
<p>可以模拟器跑，无法在真机运行。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> ~/flutter/bin/cache/lockfile</span><br></pre></td></tr></table></figure>



<h2 id="1-9-Flutter-plugin-not-installed-and-Dart-plugin-not-installed-errors-69514"><a href="#1-9-Flutter-plugin-not-installed-and-Dart-plugin-not-installed-errors-69514" class="headerlink" title="1.9 Flutter plugin not installed and Dart plugin not installed errors #69514"></a>1.9 Flutter plugin not installed and Dart plugin not installed errors #69514</h2><p>Plugin folder has changed in 4.1 version;<br>From : ~/Library/Application\ Support/AndroidStudio4.1<br>To: ~/Library/Application\ Support/Google/AndroidStudio4.1/plugins</p>
<p>Temporary fix as suggested in the above answer;</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s ~/Library/Application\ Support/Google/AndroidStudio4.1/plugins ~/Library/Application\ Support/AndroidStudio4.1</span><br></pre></td></tr></table></figure>



<h2 id="1-10-打包apk，谷歌服务连接失败"><a href="#1-10-打包apk，谷歌服务连接失败" class="headerlink" title="1.10 打包apk，谷歌服务连接失败"></a>1.10 打包apk，谷歌服务连接失败</h2><p><img src="https://i.loli.net/2021/04/27/xUMdHlnFiA79OIm.png" alt="iShot2021-04-27 15.26.00.png"></p>
<p>1、关闭gradle代理</p>
<p>2、修改项目<code>/android/build.gradle</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">       <span class="comment">// google()</span></span><br><span class="line">        <span class="comment">// jcenter()</span></span><br><span class="line">        maven &#123; url <span class="symbol">&#x27;https</span>:<span class="comment">//maven.aliyun.com/repository/google&#x27; &#125;</span></span><br><span class="line">        maven &#123; url <span class="symbol">&#x27;https</span>:<span class="comment">//maven.aliyun.com/repository/jcenter&#x27; &#125;</span></span><br><span class="line">        maven &#123; url <span class="symbol">&#x27;https</span>:<span class="comment">//maven.aliyun.com/repository/public&#x27; &#125;</span></span><br><span class="line">        maven &#123; url <span class="symbol">&#x27;https</span>:<span class="comment">//maven.aliyun.com/repository/gradle-plugin&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="symbol">&#x27;com</span>.android.tools.build:gradle:<span class="number">3.2</span>.<span class="number">1</span>&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        <span class="comment">// google()</span></span><br><span class="line">        <span class="comment">// jcenter()</span></span><br><span class="line">        maven &#123; url <span class="symbol">&#x27;https</span>:<span class="comment">//maven.aliyun.com/repository/google&#x27; &#125;</span></span><br><span class="line">        maven &#123; url <span class="symbol">&#x27;https</span>:<span class="comment">//maven.aliyun.com/repository/jcenter&#x27; &#125;</span></span><br><span class="line">        maven &#123; url <span class="symbol">&#x27;https</span>:<span class="comment">//maven.aliyun.com/repository/public&#x27; &#125;</span></span><br><span class="line">        maven &#123; url <span class="symbol">&#x27;https</span>:<span class="comment">//maven.aliyun.com/repository/gradle-plugin&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、打开你flutter SDK目下<code>/Users/gaoxiong/flutter/packages/flutter_tools/gradle/flutter.gradle</code></p>
<p>与第二步一样，编辑buildscript下的repositories属性。</p>
<p>4、打开<code>/android/gradle/wrapper/gradle-wrapper.properties</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">distributionUrl=https\:<span class="comment">//services.gradle.org/distributions/gradle-6.9-rc-1-all.zip</span></span><br><span class="line"><span class="comment">//修改路径为本地路径</span></span><br><span class="line">distributionUrl=file\:<span class="comment">///<span class="language-markdown">Users/gaoxiong/gradle/gradle-6.9-rc-1-all.zip</span></span></span><br></pre></td></tr></table></figure>



<h2 id="1-11-CocoaPods-did-not-set-the-base-configuration"><a href="#1-11-CocoaPods-did-not-set-the-base-configuration" class="headerlink" title="1.11  CocoaPods did not set the base configuration"></a>1.11  CocoaPods did not set the base configuration</h2><p> CocoaPods did not set the base configuration of your project because your project already has a custom config set. In order for CocoaPods integration to work at all, please either set the base configurations of the target <code>Runner</code> to <code>Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig</code> or include the <code>Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig</code> in your build configuration (<code>Flutter/Release.xcconfig</code>).</p>
<p><img src="https://i.loli.net/2021/04/29/nO9jRSbcmdX3Hv4.png" alt="iShot2021-04-29 17.08.54.png"></p>
<h2 id="1-12-PluginApplicationException-Failed-to-apply-plugin-id-‘com-android-internal-version-check‘"><a href="#1-12-PluginApplicationException-Failed-to-apply-plugin-id-‘com-android-internal-version-check‘" class="headerlink" title="1.12 PluginApplicationException: Failed to apply plugin [id ‘com.android.internal.version-check‘]"></a>1.12 PluginApplicationException: Failed to apply plugin [id ‘com.android.internal.version-check‘]</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在gradle.properties文件中添加</span></span><br><span class="line">android.overridePathCheck=<span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h2 id="1-13-Execution-failed-for-task’-app-compileDebugKotlin’"><a href="#1-13-Execution-failed-for-task’-app-compileDebugKotlin’" class="headerlink" title="1.13 Execution failed for task’:app:compileDebugKotlin’."></a>1.13 Execution failed for task’:app:compileDebugKotlin’.</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gradle clean build</span><br></pre></td></tr></table></figure>



<h2 id="1-14-修改bundle-ID-后，需要同步修改文件夹"><a href="#1-14-修改bundle-ID-后，需要同步修改文件夹" class="headerlink" title="1.14 修改bundle ID 后，需要同步修改文件夹"></a>1.14 修改bundle ID 后，需要同步修改文件夹</h2><img src="https://i.loli.net/2021/05/20/gBaN28K1DXtvVdb.png" style="zoom:50%;" />



<h2 id="1-15-安卓webview-flutter支持缩放"><a href="#1-15-安卓webview-flutter支持缩放" class="headerlink" title="1.15 安卓webview_flutter支持缩放"></a>1.15 安卓webview_flutter支持缩放</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webView  </span></span><br><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  <span class="comment">//重要</span></span><br><span class="line">    <span class="keyword">if</span> (Platform.isAndroid) WebView.platform = SurfaceAndroidWebView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//FlutterWebView.java </span></span><br><span class="line">    webView.getSettings().setUseWideViewPort(<span class="keyword">true</span>);</span><br><span class="line">    webView.getSettings().setSupportZoom(<span class="keyword">true</span>);</span><br><span class="line">    webView.getSettings().setBuiltInZoomControls(<span class="keyword">true</span>);</span><br><span class="line">    webView.getSettings().setLoadWithOverviewMode(<span class="keyword">true</span>);</span><br><span class="line">    webView.getSettings().setDisplayZoomControls(<span class="keyword">true</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="1-16-NoSuchMethodError-The-getter-‘length’-was-called-on-null"><a href="#1-16-NoSuchMethodError-The-getter-‘length’-was-called-on-null" class="headerlink" title="1.16 NoSuchMethodError: The getter ‘length’ was called on null."></a>1.16 NoSuchMethodError: The getter ‘length’ was called on null.</h2><p><strong>json对象没有传递model所有的属性字段。</strong></p>
<h2 id="1-17-No-such-module-‘HandyJSON’"><a href="#1-17-No-such-module-‘HandyJSON’" class="headerlink" title="1.17 No such module ‘HandyJSON’"></a>1.17 No such module ‘HandyJSON’</h2><blockquote>
<p>Xcode模拟器报错，真机不报错。</p>
<p>不知道具体原因。</p>
</blockquote>
<h2 id="1-18-flutter-localizations-from-sdk-depends-on-intl-0-17-0-and-fstore-depends-on-intl-0-16-1-flutter-localizations-from-sdk-is-forbidden"><a href="#1-18-flutter-localizations-from-sdk-depends-on-intl-0-17-0-and-fstore-depends-on-intl-0-16-1-flutter-localizations-from-sdk-is-forbidden" class="headerlink" title="1.18 flutter_localizations from sdk depends on intl 0.17.0 and fstore depends on intl ^0.16.1, flutter_localizations from sdk is forbidden"></a>1.18 <a href="https://stackoverflow.com/questions/66476379/flutter-localizations-from-sdk-depends-on-intl-0-17-0-and-fstore-depends-on-intl">flutter_localizations from sdk depends on intl 0.17.0 and fstore depends on intl ^0.16.1, flutter_localizations from sdk is forbidden</a></h2><p>This is happening because flutter_localizations need <code>intl: ^0.16.1</code> while the last version needed <code>intl: ^0.17.0-nullsafety.2</code></p>
<p>By overriding the existing dependency we can resolve this issue</p>
<p>Adding this to <code>pubspec.yaml</code> solved it:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">dependency_overrides:</span><br><span class="line">   intl: ^<span class="number">0.17</span><span class="number">.0</span>-nullsafety<span class="number">.2</span></span><br></pre></td></tr></table></figure>



<h2 id="1-19-Could-not-find-an-option-named-“devtools-server-address”"><a href="#1-19-Could-not-find-an-option-named-“devtools-server-address”" class="headerlink" title="1.19 Could not find an option named “devtools-server-address”."></a>1.19 Could not find an option named “devtools-server-address”.</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">killall java</span><br></pre></td></tr></table></figure>

<h2 id="1-20-Failed-to-list-versions-for-com-google-android-gms-play-services-location"><a href="#1-20-Failed-to-list-versions-for-com-google-android-gms-play-services-location" class="headerlink" title="1.20  Failed to list versions for com.google.android.gms:play-services-location"></a>1.20  Failed to list versions for com.google.android.gms:play-services-location</h2><blockquote>
<p>注释 location 插件</p>
</blockquote>
<h2 id="1-21-Floor使用"><a href="#1-21-Floor使用" class="headerlink" title="1.21 Floor使用"></a>1.21 Floor<a href="https://floor.codes/getting-started/">使用</a></h2><p><a href="https://floor.codes/getting-started/">https://floor.codes/getting-started/</a></p>
<p>通过在我们的项目根目录下运行:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">首次生成</span></span><br><span class="line">flutter packages pub run build_runner build</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果需要在文件变动时，自动运行命令使用</span></span><br><span class="line">flutter packages pub run build_runner watch</span><br></pre></td></tr></table></figure>

<p>更新数据冲突策略</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update</span>(onConflict: OnConflictStrategy.replace)</span><br><span class="line"><span class="meta">@Insert</span>(onConflict: OnConflictStrategy.rollback)</span><br></pre></td></tr></table></figure>

<p>写Entity</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:floor/floor.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line">  <span class="meta">@PrimaryKey</span>(autoGenerate: <span class="keyword">true</span>)</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int?</span> id;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> message;</span><br><span class="line"></span><br><span class="line">  Task(<span class="keyword">this</span>.id, <span class="keyword">this</span>.message);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">operator</span> ==(<span class="built_in">Object</span> other) =&gt;</span><br><span class="line">      identical(<span class="keyword">this</span>, other) ||</span><br><span class="line">      other <span class="keyword">is</span> Task &amp;&amp;</span><br><span class="line">          runtimeType == other.runtimeType &amp;&amp;</span><br><span class="line">          id == other.id &amp;&amp;</span><br><span class="line">          message == other.message;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">int</span> <span class="keyword">get</span> hashCode =&gt; id.hashCode ^ message.hashCode;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Task&#123;id: <span class="subst">$id</span>, message: <span class="subst">$message</span>&#125;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter常用功能</title>
    <url>/project/2021/04/17/flutter2/</url>
    <content><![CDATA[<h1 id="Flutter常用功能"><a href="#Flutter常用功能" class="headerlink" title="Flutter常用功能"></a>Flutter常用功能</h1><h2 id="1-平台差异化代码"><a href="#1-平台差异化代码" class="headerlink" title="1.平台差异化代码"></a>1.平台差异化代码</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//import &#x27;dart:io&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Platform.isIOS) &#123;</span><br><span class="line">  <span class="comment">//ios 操作</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (Platform.isAndroid) &#123;</span><br><span class="line"> 	<span class="comment">//android </span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-Flutter-剪切板"><a href="#2-Flutter-剪切板" class="headerlink" title="2.Flutter 剪切板"></a>2.Flutter 剪切板</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Clipboard.setData(ClipboardData(text: <span class="string">&#x27;复制到剪切板&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text = Clipboard.getData(Clipboard.kTextPlain);</span><br></pre></td></tr></table></figure>

<span id="more"></span> 

<h2 id="3-状态栏高度"><a href="#3-状态栏高度" class="headerlink" title="3.状态栏高度"></a>3.状态栏高度</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:ui&#x27;</span>;</span><br><span class="line">MediaQueryData.fromWindow(<span class="built_in">window</span>).padding.top</span><br></pre></td></tr></table></figure>



<h2 id="4-flutter-升级"><a href="#4-flutter-升级" class="headerlink" title="4. flutter 升级"></a>4. flutter 升级</h2><p>要查看您当前使用的分支，请运行<code>flutter channel</code>查看。</p>
<p>要切换分支，请使用<code>flutter channel beta</code> 或 <code>flutter channel master</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flutter upgrade</span><br></pre></td></tr></table></figure>



<h2 id="5-dio-https-自签名证书"><a href="#5-dio-https-自签名证书" class="headerlink" title="5. dio https 自签名证书"></a>5. dio https 自签名证书</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">(dio.httpClientAdapter <span class="keyword">as</span> DefaultHttpClientAdapter).onHttpClientCreate = (client) &#123;</span><br><span class="line">  client.badCertificateCallback = (cert, host, port) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="6-收起键盘"><a href="#6-收起键盘" class="headerlink" title="6. 收起键盘"></a>6. 收起键盘</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//flutter 收起键盘</span></span><br><span class="line">FocusScope.of(context).requestFocus(<span class="keyword">new</span> FocusNode());</span><br><span class="line"></span><br><span class="line"><span class="comment">// web 收起键盘回调执行 </span></span><br><span class="line">SystemChannels.textInput.invokeMethod(<span class="string">&#x27;TextInput.hide&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="7-打包命令"><a href="#7-打包命令" class="headerlink" title="7. 打包命令"></a>7. 打包命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">flutter build apk --build-name=1.0.3 --build-number=3</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript正则表达式</title>
    <url>/project/2022/01/02/regex/</url>
    <content><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="1-描述字符"><a href="#1-描述字符" class="headerlink" title="1. 描述字符"></a>1. 描述字符</h2><p>根据正则表达式语法规则，大部分字符仅能够描述自身，这些字符被称为<code>普通字符</code>，如所有的字母、数字等。</p>
<p><code>元字符</code>就是拥有特动功能的特殊字符，大部分需要加<code>反斜杠</code>进行标识，以便于普通字符进行区别，而少数元字符，需要加反斜杠，以便转译为普通字符使用。JavaScript 正则表达式支持的元字符如表所示。</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>查找单个字符，除了换行和行结束符</td>
</tr>
<tr>
<td>\w</td>
<td>查找单词字符</td>
</tr>
<tr>
<td>\W</td>
<td>查找非单词字符</td>
</tr>
<tr>
<td>\d</td>
<td>查找数字</td>
</tr>
<tr>
<td>\D</td>
<td>查找非数字字符</td>
</tr>
<tr>
<td>\s</td>
<td>查找空白字符</td>
</tr>
<tr>
<td>\S</td>
<td>查找非空白字符</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词边界</td>
</tr>
<tr>
<td>\B</td>
<td>匹配非单词边界</td>
</tr>
<tr>
<td>\0</td>
<td>查找 NUL字符</td>
</tr>
<tr>
<td>\n</td>
<td>查找换行符</td>
</tr>
<tr>
<td>\f</td>
<td>查找换页符</td>
</tr>
<tr>
<td>\r</td>
<td>查找回车符</td>
</tr>
<tr>
<td>\t</td>
<td>查找制表符</td>
</tr>
<tr>
<td>\v</td>
<td>查找垂直制表符</td>
</tr>
<tr>
<td>\xxx</td>
<td>查找以八进制数 xxxx 规定的字符</td>
</tr>
<tr>
<td>\xdd</td>
<td>查找以十六进制数 dd 规定的字符</td>
</tr>
<tr>
<td>\uxxxx</td>
<td>查找以十六进制 xxxx规定的 Unicode 字符</td>
</tr>
</tbody></table>
<span id="more"></span> 
<h2 id="2-转义，特殊字符"><a href="#2-转义，特殊字符" class="headerlink" title="2. 转义，特殊字符"></a>2. 转义，特殊字符</h2><p>记一下几个需要转义的正则表达式字符</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$</td>
<td align="left">匹配输入字符串的结尾位置</td>
</tr>
<tr>
<td align="left">( )</td>
<td align="left">标记一个子表达式的开始和结束位置</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">匹配前面的子表达式零次或多次</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">匹配前面的子表达式一次或多次</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">匹配除换行符 \n之外的任何单字符</td>
</tr>
<tr>
<td align="left">[ ]</td>
<td align="left">标记一个中括号表达式的开始</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符</td>
</tr>
<tr>
<td align="left">\</td>
<td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">匹配输入字符串的开始位置，在【^】表示取反</td>
</tr>
<tr>
<td align="left">{ }</td>
<td align="left">标记限定符表达式的开始</td>
</tr>
<tr>
<td align="left">|</td>
<td align="left">指明两项之间的一个选择</td>
</tr>
</tbody></table>
<h2 id="3-描述字符范围"><a href="#3-描述字符范围" class="headerlink" title="3. 描述字符范围"></a>3. 描述字符范围</h2><p>在正则表达式语法中，放括号表示字符范围。在方括号中可以包含多个字符，表示匹配其中任意一个字符。如果多个字符的编码顺序是连续的，可以仅指定开头和结尾字符，省略中间字符，仅使用连字符<code>~</code>表示。如果在方括号内添加脱字符<code>^</code>前缀，还可以表示范围之外的字符。例如：</p>
<ul>
<li>[abc]：查找方括号内任意一个字符。</li>
<li>[^abc]：查找不在方括号内的字符。</li>
<li>[0-9]：查找从 0 至 9 范围内的数字，即查找数字。</li>
<li>[a-z]：查找从小写 a 到小写 z 范围内的字符，即查找小写字母。</li>
<li>[A-Z]：查找从大写 A 到大写 Z 范围内的字符，即查找大写字母。</li>
<li>[A-z]：查找从大写 A 到小写 z 范围内的字符，即所有大小写的字母。</li>
</ul>
<h2 id="4-重复匹配"><a href="#4-重复匹配" class="headerlink" title="4. 重复匹配"></a>4. 重复匹配</h2><p>在正则表达式语法中，定义了一组重复类量词，如表所示。它们定义了重复匹配字符的确数或约数。</p>
<table>
<thead>
<tr>
<th>量词</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>n+</td>
<td>匹配任何包含至少一个 n 的字符串</td>
</tr>
<tr>
<td>n*</td>
<td>匹配任何包含零个或多个 n 的字符串</td>
</tr>
<tr>
<td>n?</td>
<td>匹配任何包含零个或一个 n 的字符串</td>
</tr>
<tr>
<td>n{x}</td>
<td>匹配包含 x 个 n 的序列的字符串</td>
</tr>
<tr>
<td>n{x,y}</td>
<td>匹配包含最少 x 个、最多 y 个 n 的序列的字符串</td>
</tr>
<tr>
<td>n{x,}</td>
<td>匹配包含至少 x 个 n 的序列的字符串</td>
</tr>
</tbody></table>
<h2 id="5-惰性匹配"><a href="#5-惰性匹配" class="headerlink" title="5. 惰性匹配"></a>5. 惰性匹配</h2><p>重复类量词都具有贪婪性，在条件允许的前提下，会匹配尽可能多的字符。</p>
<ul>
<li>?、{n} 和 {n,m} 重复类具有弱贪婪性，表现为贪婪的有限性。</li>
<li>*、+ 和 {n,} 重复类具有强贪婪性，表现为贪婪的无限性。</li>
</ul>
<p>针对 6 种重复类惰性匹配的简单描述如下：</p>
<ul>
<li>{n,m}?：尽量匹配 n 次，但是为了满足限定条件也可能最多重复 m 次。</li>
<li>{n}?：尽量匹配 n 次。</li>
<li>{n,}?：尽量匹配 n 次，但是为了满足限定条件也可能匹配任意次。</li>
<li>??：尽量匹配，但是为了满足限定条件也可能最多匹配 1 次，相当于 {0,1}?。</li>
<li>+?：尽量匹配 1 次，但是为了满足限定条件也可能匹配任意次，相当于 {1,}?。</li>
<li>*? ：尽量不匹配，但是为了满足限定条件也可能匹配任意次，相当于 {0,}?。</li>
</ul>
<h2 id="6-前向查找"><a href="#6-前向查找" class="headerlink" title="6. 前向查找"></a>6. 前向查找</h2><h3 id="正向查找"><a href="#正向查找" class="headerlink" title="正向查找"></a>正向查找</h3><p>指定匹配模式后面的字符必须被匹配，但又不返回这些字符，（找到这里的位置）。语法格式如下：</p>
<p>匹配模式 (?= 匹配条件)</p>
<p>声明包含在小括号内，它不是分组，因此作为子表达式。</p>
<p>下面代码定义一个正前向生命的匹配模式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;one:1;two=2&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> r = <span class="regexp">/\w*(?==)/</span>;  <span class="comment">//使用正前向声明，指定执行匹配必须满足的条件</span></span><br><span class="line"><span class="keyword">var</span> a = s.<span class="title function_">match</span>(r);  <span class="comment">//返回数组[&quot;two&quot;]</span></span><br></pre></td></tr></table></figure>

<p>在上面示例中，通过<code>?==</code>锚定条件，指定只有在 \w* 所能够匹配的字符后面跟随一个等号字符，才能够执行 \w* 匹配。所以，最后匹配的字符串“two”，而不是字符串“one”。</p>
<h3 id="前向负查找"><a href="#前向负查找" class="headerlink" title="前向负查找"></a>前向负查找</h3><p>与正向声明匹配相反，指定接下来的字符都不必被匹配。语法格式如下：</p>
<p>匹配模式(?! 匹配条件)</p>
<p>下面代码定义一个反前向生命的匹配模式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;one:1;two=2&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> r = <span class="regexp">/\w*(?!=)/</span>;  <span class="comment">//使用正前向声明，指定执行匹配不必满足的条件</span></span><br><span class="line"><span class="keyword">var</span> a = s.<span class="title function_">match</span>(r);  <span class="comment">//返回数组[&quot;one&quot;]</span></span><br></pre></td></tr></table></figure>

<p>在上面示例中，通过<code>?!=</code>锚定条件，指定只有在“\w<em>”所能够匹配的字符后面不跟随一个等号字符，才能够执行 \w</em>匹配。所以，最后匹配的是字符串“one”，而不是字符串“two”。</p>
<h3 id="后项查找"><a href="#后项查找" class="headerlink" title="后项查找"></a>后项查找</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;&lt;h1&gt;title&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> r = <span class="regexp">/(?&lt;=&lt;h1&gt;).*/</span>;   </span><br><span class="line"><span class="keyword">var</span> a = s.<span class="title function_">match</span>(r);      <span class="comment">//返回数组[&#x27;title&lt;/h1&gt;&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="后向负查找"><a href="#后向负查找" class="headerlink" title="后向负查找"></a>后向负查找</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;&lt;h1&gt;title&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> r = <span class="regexp">/(?&lt;!&lt;h1&gt;)\w*/</span>;   </span><br><span class="line"><span class="keyword">var</span> a = s.<span class="title function_">match</span>(r);     <span class="comment">//返回[]</span></span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>回溯查找</th>
<th>正则</th>
<th>记忆方式</th>
</tr>
</thead>
<tbody><tr>
<td>引用</td>
<td>\0,\1,\2 和 $0, $1, $2</td>
<td>转义+数字</td>
</tr>
<tr>
<td>非捕获组</td>
<td>(?:)</td>
<td>引用表达式(()), 本身不被消费(?),引用(:)</td>
</tr>
<tr>
<td>前向查找</td>
<td>(?=)</td>
<td>引用子表达式(())，本身不被消费(?), 正向的查找(=)</td>
</tr>
<tr>
<td>前向负查找</td>
<td>(?!)</td>
<td>引用子表达式(())，本身不被消费(?), 负向的查找(!)</td>
</tr>
<tr>
<td>后向查找</td>
<td>(?&lt;=)</td>
<td>引用子表达式(())，本身不被消费(?), 后向的(&lt;，开口往后)，正的查找(=)</td>
</tr>
<tr>
<td>后向负查找</td>
<td>(?&lt;!)</td>
<td>引用子表达式(())，本身不被消费(?), 后向的(&lt;，开口往后)，负的查找(!)</td>
</tr>
</tbody></table>
<h1 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.版本号x.y.z</span></span><br><span class="line"><span class="keyword">let</span> versionRegex = <span class="regexp">/^(?:\d+\.)&#123;2&#125;\d+$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.大于等于0, 小于等于150, 支持小数位出现5</span></span><br><span class="line"><span class="keyword">let</span> pointRegex = <span class="regexp">/^(?:[1-9]?\d|1[0-4]\d)(?:.5)?$|150/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.匹配所有页面内元素的id名称</span></span><br><span class="line"><span class="keyword">const</span> idRegexp = <span class="regexp">/id=&quot;([^&quot;]+)&quot;/g</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span></span><br><span class="line">  .<span class="title function_">match</span>(idRegexp)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function">(<span class="params">idStr</span>) =&gt;</span> idStr.<span class="title function_">replace</span>(idRegexp, <span class="string">&#x27;$1&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. windows下的文件夹和文件路径</span></span><br><span class="line"><span class="keyword">const</span> windowsPathRegex = <span class="regexp">/^[a-zA-Z]:\\(?:[^\\:*&lt;&gt;|&quot;?\r\n/]+\\?)*(?:(?:[^\\:*&lt;&gt;|&quot;?\r\n/]+)\.\w+)?$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.手机号</span></span><br><span class="line"><span class="keyword">const</span> mobileRegex = <span class="regexp">/^(?:\+?86)?1(?:3\d&#123;3&#125;|5[^4\D]\d&#123;2&#125;|8\d&#123;3&#125;|7(?:[235-8]\d&#123;2&#125;|4(?:0\d|1[0-2]|9\d))|9[0-35-9]\d&#123;2&#125;|66\d&#123;2&#125;)\d&#123;6&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.是否中文</span></span><br><span class="line"><span class="keyword">const</span> checkChineseRegex = <span class="regexp">/^[\u4E00-\u9FA5]+$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.url是否是http或者https协议头</span></span><br><span class="line"><span class="keyword">const</span> checkProtocolRegex = <span class="regexp">/^https?:/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8.16进制颜色</span></span><br><span class="line"><span class="keyword">const</span> matchColorRegex = <span class="regexp">/#(?:[\da-fA-F]&#123;6&#125;|[\da-fA-F]&#123;3&#125;)/g</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 9.时间日期格式</span></span><br><span class="line"><span class="keyword">const</span> checkDateRegex = <span class="regexp">/^\d&#123;4&#125;(-\.\/)(?:0[1-9]|1[02])\1(?:0[1-9]|[12]\d|3[01])$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.24小时制时间</span></span><br><span class="line"><span class="keyword">const</span> check24TimeRegex = <span class="regexp">/^(?:(?:0?|1)\d|2[0-3]):(?:0?|[1-5])\d$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 11.将字符串驼峰化</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">camelCase</span> = (<span class="params">string</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> camelCaseRegex = <span class="regexp">/[-_\s]+(.)?/g</span></span><br><span class="line">  <span class="keyword">return</span> string.<span class="title function_">replace</span>(camelCaseRegex, <span class="function">(<span class="params">match, char</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> char ? char.<span class="title function_">toUpperCase</span>() : <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 12. 字符串首字母大写，剩下的小写</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">capitalize</span> = (<span class="params">string</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> capitalizeRegex = <span class="regexp">/(?:^|\s+)\w/g</span></span><br><span class="line">  <span class="keyword">return</span> string.<span class="title function_">toLowerCase</span>().<span class="title function_">replace</span>(capitalizeRegex, <span class="function">(<span class="params">match</span>) =&gt;</span> match.<span class="title function_">toUpperCase</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 13.HTML转义</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">escape</span> = (<span class="params">string</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> escapeMaps = &#123;</span><br><span class="line">  <span class="string">&#x27;&amp;&#x27;</span>:<span class="string">&#x27;amp&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;&#x27;</span>:<span class="string">&#x27;lt&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&gt;&#x27;</span>:<span class="string">&#x27;gt&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&quot;&#x27;</span>:<span class="string">&#x27;quot&#x27;</span>,</span><br><span class="line">  <span class="string">&quot;&#x27;&quot;</span>:<span class="string">&#x27;#39&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">const</span> escapeRegexp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`[<span class="subst">$&#123;<span class="built_in">Object</span>.keys(escapeMaps).join(<span class="string">&#x27;&#x27;</span>)&#125;</span>]`</span>, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">	<span class="keyword">return</span> string.<span class="title function_">replace</span>(escapeRegexp, <span class="function">(<span class="params">match</span>) =&gt;</span> <span class="string">`&amp;<span class="subst">$&#123;escapeMaps[match]&#125;</span>;`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 14.HTML反转义</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">unescape</span> = (<span class="params">string</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> unescapeMaps = &#123;</span><br><span class="line">    <span class="string">&#x27;amp&#x27;</span>: <span class="string">&#x27;&amp;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lt&#x27;</span>: <span class="string">&#x27;&lt;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gt&#x27;</span>: <span class="string">&#x27;&gt;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;quot&#x27;</span>: <span class="string">&#x27;&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#39&#x27;</span>: <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> unescapeRegexp = <span class="regexp">/&amp;([^;]+);/g</span></span><br><span class="line">  <span class="keyword">return</span> string.<span class="title function_">replace</span>(unescapeRegexp, <span class="function">(<span class="params">match, unescapeKey</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> unescapeMaps[ unescapeKey ] || match</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 15.数字价格千分位分割</span></span><br><span class="line"><span class="keyword">const</span> thousandRegex = <span class="regexp">/(?!^)(?=(\d&#123;3&#125;)+$)/g</span></span><br><span class="line"><span class="string">&#x27;123456789&#x27;</span>.<span class="title function_">replace</span>(thousandRegex, <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 16.手机号3-4-4分割</span></span><br><span class="line"><span class="keyword">let</span> mobileReg = <span class="regexp">/(?=(\d&#123;4&#125;)+$)/g</span> </span><br><span class="line"><span class="string">&#x27;18379836654&#x27;</span>.<span class="title function_">replace</span>(mobileReg, <span class="string">&quot;-&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 17.手机号3-4-4分割扩展</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">formatMobile</span> = (<span class="params">mobile</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">String</span>(mobile).<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">11</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/(?&lt;=\d&#123;3&#125;)\d+/</span>, <span class="function">(<span class="params">$<span class="number">0</span></span>) =&gt;</span> <span class="string">&#x27;-&#x27;</span> + $<span class="number">0</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/(?&lt;=[\d-]&#123;8&#125;)\d&#123;1,4&#125;/</span>, <span class="function">(<span class="params">$<span class="number">0</span></span>) =&gt;</span> <span class="string">&#x27;-&#x27;</span> + $<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 18.验证密码的合法性,密码长度是6-12位，由数字、小写字母和大写字母组成，但必须至少包括2种字符</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/((?=.*\d)((?=.*[a-z])|(?=.*[A-Z])))|(?=.*[a-z])(?=.*[A-Z])^[a-zA-Z\d]&#123;6,12&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 19.实现一个trim函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">trim</span> = (<span class="params">str</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/^\s*|\s*$/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 20.去掉所有的空格</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reg</span> = (<span class="params">str</span>) =&gt; &#123;</span><br><span class="line"> <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/\s/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>正则</tag>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/project/2019/12/25/Git/</url>
    <content><![CDATA[<h1 id="一、process"><a href="#一、process" class="headerlink" title="一、process"></a>一、process</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b branchName gitAddress  <span class="comment">#克隆指定分支branchName</span></span><br><span class="line"></span><br><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt; <span class="comment">#推送到指定远程分支</span></span><br></pre></td></tr></table></figure>




<ul>
<li>直接开发</li>
</ul>
<p><strong>以下使用ZSH Git alias命令</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gst   <span class="comment"># 查看文件修改</span></span><br><span class="line">gaa   <span class="comment"># 添加所有修改 index</span></span><br><span class="line">g cz  <span class="comment"># 提交，填写commit</span></span><br><span class="line">gup   <span class="comment"># git pull --rebase 合并代码(grbc  #git rebase --continue )</span></span><br><span class="line">gp    <span class="comment"># 推送</span></span><br></pre></td></tr></table></figure>

<ul>
<li> 新分支开发</li>
</ul>
<p><strong>在 master 分支上开始</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -b <span class="built_in">local</span>	  <span class="comment"># 创建本地dev分支开始开发</span></span><br><span class="line">git add .               <span class="comment"># 添加到工作区</span></span><br><span class="line">git commit -m <span class="string">&quot;msg&quot;</span>  		<span class="comment"># 或使用commitzen</span></span><br><span class="line">git pull origin <span class="built_in">local</span> 	<span class="comment"># 拉去最新代码</span></span><br><span class="line">git pull origin master 	<span class="comment"># 拉去最新代码</span></span><br><span class="line">git checkout master 		<span class="comment"># 切回master分支</span></span><br><span class="line">git merge <span class="built_in">local</span>	--no-ff	<span class="comment"># 合并代码 (使代码合并时产生分叉节点)</span></span><br><span class="line">git push								<span class="comment"># 推送代码</span></span><br></pre></td></tr></table></figure>
<span id="more"></span> 
<p><strong>补充：没有Origin Master分支权限时</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push --set-upstream origin gaox <span class="comment"># 设置新的远程分支</span></span><br><span class="line">git branch --set-upstream-to=origin/&lt;branch&gt; <span class="comment"># 修改远程上传分支</span></span><br></pre></td></tr></table></figure>



<h1 id="二、git-rebase-merge"><a href="#二、git-rebase-merge" class="headerlink" title="二、git rebase / merge"></a>二、git rebase / merge</h1><ul>
<li>公共分支使用 merge</li>
<li>私有分支使用 rebase</li>
</ul>
<blockquote>
<p>使用merge命令合并分支，解决完冲突，执行git add .和git commit -m’fix conflict’。这个时候会产生一个commit。</p>
</blockquote>
<blockquote>
<p>使用rebase命令合并分支，解决完冲突，执行git add .和git rebase –continue，不会产生额外的commit。这样的好处是，‘干净’，分支上不会有无意义的解决分支的commit；坏处，如果合并的分支中存在多个commit，需要重复处理多次冲突。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git merge [-n] [--<span class="built_in">stat</span>] [--no-commit] [--squash] [--[no-]edit]</span><br><span class="line">    [-s &lt;strategy&gt;] [-X &lt;strategy-option&gt;] [-S[&lt;keyid&gt;]]</span><br><span class="line">    [--[no-]allow-unrelated-histories]</span><br><span class="line">    [--[no-]rerere-autoupdate] [-m &lt;msg&gt;] [&lt;commit&gt;…?]</span><br><span class="line">git merge --abort</span><br><span class="line">git merge --<span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不使用快进fast-forward</span></span><br><span class="line">git merge --no-ff -m <span class="string">&quot;merge with no-ff&quot;</span> dev</span><br></pre></td></tr></table></figure>



<p>命令可以压缩合并多次提交</p>
<blockquote>
<p>PR前应当操作 rebase -i </p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git rebase -i [startpoint] [endpoint]</span><br><span class="line"><span class="comment"># 合并最近的两次提交</span></span><br><span class="line">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure>



<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reflog <span class="comment">#首先执行git reflog查看本地记录</span></span><br><span class="line"></span><br><span class="line">git reset --hard 9b2d32b605 <span class="comment">#回退版本</span></span><br></pre></td></tr></table></figure>



<h1 id="三、git-commit"><a href="#三、git-commit" class="headerlink" title="三、git commit"></a>三、git commit</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git commit -m “message” 【gcmsg】</span><br><span class="line">git commit -a -m “massage”【gcam】</span><br><span class="line"></span><br><span class="line"><span class="comment">#在不增加一个新的commit-id的情况下将新修改的代码追加到前一次</span></span><br><span class="line">git commit --amend --no-edit【gcn!】</span><br><span class="line"><span class="comment">#需要强制推送到远程</span></span><br><span class="line">git push -f   【gpf!】</span><br></pre></td></tr></table></figure>

<p>1、手动填写commit规范</p>
<blockquote>
<p>格式为 Type(scope):detail</p>
</blockquote>
<p>Type:</p>
<ol>
<li>feat: 新功能（feature）</li>
<li>fix: 修补 bug</li>
<li>docs: 文档</li>
<li>style: 样式</li>
<li>refactor: 重构</li>
<li>test: 增加测试</li>
<li>chore: 构建过程或辅助工具的变动</li>
</ol>
<p>Scope:（选填）</p>
<p>​    改动影响的文件或者模块</p>
<p>2、安装commitizen</p>
<p>辅助生成 commit msg 规范安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install -g commitizen</span><br><span class="line">sudo npm install -g cz-conventional-changelog</span><br><span class="line">echo &#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27; &gt; ~/.czrc</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="四、git-diff"><a href="#四、git-diff" class="headerlink" title="四、git diff"></a>四、git diff</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#0 查看最近一次提交的差异</span></span><br><span class="line">git diff HEAD～1--<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.比较两次commit提交之后的差异：</span></span><br><span class="line">git diff hash1 hash2 --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.具体查看两次commit提交之后某文件的差异：</span></span><br><span class="line">git diff hash1 hash2 -- 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.比较两个分支的所有有差异的文件的详细差异：</span></span><br><span class="line">git diff branch1 branch2</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.比较两个分支的指定文件的详细差异</span></span><br><span class="line">git diff branch1 branch2 &lt;filePathName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.比较两个分支的所有有差异的文件列表</span></span><br><span class="line">git diff branch1 branch2 --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line">git diff 					[gd]		<span class="comment">#比较的是 工作区和暂存区 </span></span><br><span class="line">git diff --cached [gdca]	<span class="comment">#比较的是 暂存区和本地仓库</span></span><br></pre></td></tr></table></figure>



<h1 id="五、git-stash"><a href="#五、git-stash" class="headerlink" title="五、git stash"></a>五、git stash</h1><p><code>stash</code>命令可用于临时保存和回复修改，<strong>可跨分支</strong>。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#保存，save为可选项，message为本次保存的注释</span></span><br><span class="line">git stash [save] -m <span class="string">&#x27;message&#x27;</span></span><br><span class="line"><span class="comment">#所有保存的记录列表</span></span><br><span class="line">git stash list</span><br><span class="line"><span class="comment">#恢复，num是可选项，只能恢复一次</span></span><br><span class="line">git stash pop stash@&#123;num&#125;</span><br><span class="line"><span class="comment">#恢复，num`是可选项，可恢复多次</span></span><br><span class="line">git stash apply stash@&#123;num&#125;</span><br><span class="line"><span class="comment">#删除某个保存，`num`是可选项，</span></span><br><span class="line">git stash drop stash@&#123;num&#125;</span><br><span class="line"><span class="comment">#删除所有保存</span></span><br><span class="line">git stash clear</span><br></pre></td></tr></table></figure>




<h1 id="六、git-reset"><a href="#六、git-reset" class="headerlink" title="六、git reset"></a>六、git reset</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#放弃工作区代码</span></span><br><span class="line">git checkout -- filepathname  <span class="comment">#单个文件</span></span><br><span class="line">git checkout .  <span class="comment">#放弃所以的文件修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#放弃缓存区代码</span></span><br><span class="line">git reset HEAD filepathname  <span class="comment">#单个文件</span></span><br><span class="line">git reset HEAD . 						 <span class="comment">#放弃所以的文件修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#本地仓库回滚</span></span><br><span class="line">git reset --hard HEAD         	<span class="comment">#来回退到上一次commit的状态。</span></span><br><span class="line">git reset --hard HEAD～3        <span class="comment">#来回退到前三次commit的状态。</span></span><br><span class="line">git reset --hard dfd749b        <span class="comment">#此命令可以用来回退到任意版本</span></span><br><span class="line">git reset --hard origin/master  <span class="comment">#放弃本地修改</span></span><br><span class="line">git reset --soft origin/master  <span class="comment">#放弃本地修改，添加到staged</span></span><br><span class="line">git reset --mixed origin/master  <span class="comment">#放弃本地修改，添加到workspace</span></span><br></pre></td></tr></table></figure>



<h1 id="七、git-branch"><a href="#七、git-branch" class="headerlink" title="七、git branch"></a>七、git branch</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -a  								 <span class="comment">#查看所有分支(gba)</span></span><br><span class="line">git push origin -d ios   <span class="comment">#删除远程分支ios</span></span><br><span class="line">git branch -D ios        			 <span class="comment">#删除本地分支ios (gbd ios)</span></span><br><span class="line">git checkout -b hotfix				 <span class="comment">#新建并切换到新分支hotfix(gcb hotfix)</span></span><br><span class="line">git switch -c hotfix						</span><br><span class="line">git push origin BranchName     <span class="comment">#推送远程新分支</span></span><br><span class="line">git push -f origin localBranch <span class="comment">#推送本地分支到远程</span></span><br><span class="line">git branch --set-upstream-to=origin/BranchName <span class="comment">#修改上传地址</span></span><br><span class="line">git branch --unset-upstream    <span class="comment"># 去掉上传地址</span></span><br><span class="line">git branch -m 原分支名 新分支名   <span class="comment"># 如果对于分支不是当前分支，可以使用下面代码</span></span><br><span class="line">git branch -m 新分支名称         <span class="comment"># 如果是当前，那么可以使用加上新名字</span></span><br></pre></td></tr></table></figure>



<h1 id="八、git-remote"><a href="#八、git-remote" class="headerlink" title="八、git remote"></a>八、git remote</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote set-url origin &lt;url&gt; <span class="comment">#修改origin仓库地址</span></span><br><span class="line">git remote add &lt;远程主机名&gt; &lt;url&gt; <span class="comment">#添加远程地址的</span></span><br><span class="line">git remote -v <span class="comment">#查看本地添加了哪些远程地址</span></span><br><span class="line">git remote remove origin <span class="comment">#删除本地指定的远程地址</span></span><br><span class="line">git remote update origin --prune <span class="comment">#若要更新远程分支的本地列表</span></span><br><span class="line">git remote prune origin <span class="comment">#修剪远程分支</span></span><br></pre></td></tr></table></figure>



<h1 id="九、git-config"><a href="#九、git-config" class="headerlink" title="九、git config"></a>九、git config</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global --list <span class="comment">#查看全局配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改分为两种情况：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.user.name和user.email的值为空</span></span><br><span class="line">git config --global user.name <span class="string">&quot;GaoX&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;gaoxiong@cestc.cn&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.user.name和user.email修改</span></span><br><span class="line">git config --global --replace-all user.name <span class="string">&quot;GaoX&quot;</span>`</span><br><span class="line">git config --global --replace-all user.email <span class="string">&quot;gaoxiong@cestc.cn&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置alias</span></span><br><span class="line">git config --global <span class="built_in">alias</span>.&lt;shortcut&gt; <span class="string">&quot;&lt;String&gt;&quot;</span></span><br></pre></td></tr></table></figure>



<h1 id="十、-gitignore"><a href="#十、-gitignore" class="headerlink" title="十、.gitignore"></a>十、.gitignore</h1><ul>
<li><p>配置.gitignore文件来忽略我们不想提交到git上的文件。</p>
</li>
<li><p>忽略已经被tracking过的文件</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//（ignoreFile就是你想忽略的文件），让git不再tracking这些文件。 </span><br><span class="line">git <span class="built_in">rm</span> -r --cached  ios/Flutter/.last_build_id</span><br><span class="line">git <span class="built_in">rm</span> -r --cached  android/gradle/wrapper/gradle-wrapper.properties</span><br></pre></td></tr></table></figure>



<h1 id="十一、git-cherry-pick"><a href="#十一、git-cherry-pick" class="headerlink" title="十一、git cherry-pick"></a>十一、git cherry-pick</h1><ul>
<li>将指定的 commit 应用于当前分支。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git cherry-pick &lt;commitHash&gt;     <span class="comment"># 合并提交</span></span><br><span class="line"></span><br><span class="line">git cherry-pick feature				   <span class="comment"># 上面代码表示将`feature`分支的最近一次提交，转移到当前分支</span></span><br></pre></td></tr></table></figure>

<ul>
<li>转移多个提交</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git cherry-pick &lt;HashA&gt; &lt;HashB&gt;	<span class="comment">#两个提交</span></span><br><span class="line"></span><br><span class="line">git cherry-pick A..B	 <span class="comment">#(A,B]的所有提交。提交 A 必须早于提交 B，否则命令将失败，但不会报错。</span></span><br><span class="line"></span><br><span class="line">git cherry-pick A^..B  <span class="comment">#[A,B]的所有提交</span></span><br></pre></td></tr></table></figure>

<ul>
<li>git cherry-pick命令的常用配置项如下。</li>
</ul>
<p><strong>（1）<code>-e</code>，<code>--edit</code></strong></p>
<p>打开外部编辑器，编辑提交信息。</p>
<p><strong>（2）<code>-n</code>，<code>--no-commit</code></strong></p>
<p>只更新工作区和暂存区，不产生新的提交。</p>
<p><strong>（3）<code>-x</code></strong></p>
<p>在提交信息的末尾追加一行<code>(cherry picked from commit ...)</code>，方便以后查到这个提交是如何产生的。</p>
<p><strong>（4）<code>-s</code>，<code>--signoff</code></strong></p>
<p>在提交信息的末尾追加一行操作者的签名，表示是谁进行了这个操作。</p>
<ul>
<li>转移到另一个代码库</li>
</ul>
<blockquote>
<p>Cherry pick 也支持转移另一个代码库的提交，方法是先将该库加为远程仓库。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote add &lt;target&gt; &lt;gitUrl&gt; 	  <span class="comment">#添加了一个远程仓库`target`。</span></span><br><span class="line">git fetch &lt;target&gt;										<span class="comment">#将远程代码仓库抓取到本地。</span></span><br><span class="line">git <span class="built_in">log</span> &lt;target&gt;/&lt;branch&gt;							<span class="comment">#检查一下要从远程仓库转移的提交，获取它的哈希值。</span></span><br><span class="line">git cherry-pick &lt;commitHash&gt;</span><br></pre></td></tr></table></figure>



<h1 id="十二、git-log"><a href="#十二、git-log" class="headerlink" title="十二、git log"></a>十二、git log</h1><ul>
<li>log 样式</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git shortlog       <span class="comment">#分别显示所有人的提交信息</span></span><br><span class="line">git <span class="built_in">log</span> --oneline  <span class="comment">#单行模式</span></span><br><span class="line">git <span class="built_in">log</span> --decorate <span class="comment">#详细信息</span></span><br><span class="line">git <span class="built_in">log</span> --graph    <span class="comment">#分支结构</span></span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span>		 <span class="comment">#代码变动行数</span></span><br><span class="line">git <span class="built_in">log</span> -p				 <span class="comment">#代码变动详细diff</span></span><br><span class="line">git <span class="built_in">log</span> --relative-date <span class="comment">#使用较短的相对时间显示</span></span><br><span class="line">git <span class="built_in">log</span> --abbrev-commit <span class="comment">#仅显示SHA-1的前几个字符，而非所有的40个字符</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline <span class="comment">#使用其他格式显示历史提交信息，可选项有：oneline,short,medium,full,fuller,email,raw以及format:&lt;string&gt;,默认为medium</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#%cn、%h和%cd这三种占位符会被分别替换为作者名字、缩略标识和提交日期</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=fuller:<span class="string">&quot;%cn committed %h on %cd&quot;</span> <span class="comment">#自定义样式</span></span><br><span class="line">git <span class="built_in">log</span> --color --graph --pretty=format:<span class="string">&#x27;%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an &lt;%ae&gt;%Creset %C(bold green)%cr (%ci)&#x27;</span> --abbrev-commit</span><br></pre></td></tr></table></figure>

<blockquote>
<p>控制显示的记录格式，如：</p>
<ol>
<li>%H 提交对象（commit）的完整哈希字串</li>
<li>%h 提交对象的简短哈希字串</li>
<li>%T 树对象（tree）的完整哈希字串</li>
<li>%t 树对象的简短哈希字串</li>
<li>%P 父对象（parent）的完整哈希字串</li>
<li>%p 父对象的简短哈希字串</li>
<li>%an 作者（author）的名字</li>
<li>%ae 作者的电子邮件地址</li>
<li>%ad 作者修订日期（可以用 -date= 选项定制格式）</li>
<li>%ar 作者修订日期，按多久以前的方式显示</li>
<li>%cn 提交者(committer)的名字</li>
<li>%ce 提交者的电子邮件地址</li>
<li>%cd 提交日期（可以用 -date= 选项定制格式）</li>
<li>%cr 提交日期，按多久以前的方式显示</li>
<li>%s 提交说明</li>
</ol>
</blockquote>
<ul>
<li>log 筛选参数</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -&lt;n&gt;        <span class="comment">#显示前n条log</span></span><br><span class="line">git <span class="built_in">log</span> --since=<span class="string">&quot;2021-11-25&quot;</span>  <span class="comment">#按时间--until=、 --after=、 --before=（&quot;1 week ago&quot;和”yesterday&quot;）</span></span><br><span class="line">git <span class="built_in">log</span> --author=<span class="string">&quot;&lt;GaoX&gt;&quot;</span></span><br><span class="line">git <span class="built_in">log</span> --grep=<span class="string">&quot;&lt;fix&gt;&quot;</span> -i  <span class="comment">#按commit， -i忽略大小写</span></span><br><span class="line">git <span class="built_in">log</span> --&lt;dev&gt;     			 <span class="comment">#按分支</span></span><br><span class="line">git <span class="built_in">log</span> --no-merges   		 <span class="comment">#去掉合并</span></span><br><span class="line">git <span class="built_in">log</span> --&lt;tag&gt;  					 <span class="comment">#&lt;tag&gt;之前的提交</span></span><br><span class="line">git <span class="built_in">log</span> --&lt;tag&gt;..  				 <span class="comment">#&lt;tag&gt;之后的提交</span></span><br></pre></td></tr></table></figure>

<ul>
<li>代码统计</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、统计某人代码提交量</span></span><br><span class="line">git <span class="built_in">log</span> --author=<span class="string">&quot;gaox&quot;</span> --pretty=tformat: --numstat | awk <span class="string">&#x27;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc &#125;&#x27;</span> -;</span><br><span class="line"><span class="comment">#2、统计所有人代码提交量（指定统计提交文件类型）</span></span><br><span class="line">git <span class="built_in">log</span> --format=<span class="string">&#x27;%aN&#x27;</span> | <span class="built_in">sort</span> -u | <span class="keyword">while</span> <span class="built_in">read</span> name; <span class="keyword">do</span> <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$name</span>\t&quot;</span>; git <span class="built_in">log</span> --author=<span class="string">&quot;<span class="variable">$name</span>&quot;</span> --pretty=tformat: --numstat | awk <span class="string">&#x27;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc &#125;&#x27;</span> -; <span class="keyword">done</span></span><br><span class="line"><span class="comment">#3、统计某时间范围内的代码提交量</span></span><br><span class="line">git <span class="built_in">log</span> --author=gaoxiong --since=2021-11-01 --until=2021-11-30 --format=<span class="string">&#x27;%aN&#x27;</span> | <span class="built_in">sort</span> -u | <span class="keyword">while</span> <span class="built_in">read</span> name; <span class="keyword">do</span> <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$name</span>\t&quot;</span>; git <span class="built_in">log</span> --author=<span class="string">&quot;<span class="variable">$name</span>&quot;</span> --pretty=tformat: --numstat | awk <span class="string">&#x27;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc &#125;&#x27;</span> -; <span class="keyword">done</span></span><br><span class="line"><span class="comment">#4、查看git提交前10名</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=<span class="string">&#x27;%aN&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -k1 -n -r | <span class="built_in">head</span> -n 10</span><br><span class="line"><span class="comment">#5、提交数统计</span></span><br><span class="line">git <span class="built_in">log</span> --oneline | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure>



<h1 id="十三、git-tag"><a href="#十三、git-tag" class="headerlink" title="十三、git tag"></a>十三、git tag</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在 Git 中列出已有的标签非常简单，只需要输入 git tag （可带上可选的 -l 选项 --list）</span></span><br><span class="line">git tag</span><br><span class="line">git tag -l <span class="string">&quot;v1.8.5*&quot;</span>  <span class="comment">#如果只对 1.8.5 系列感兴趣</span></span><br><span class="line">git tag -a v1.4 -m <span class="string">&quot;my version 1.4&quot;</span> <span class="comment">#附注tag</span></span><br><span class="line">git tag v1.4-lw     	<span class="comment">#轻量tag</span></span><br><span class="line">git show v1.4					<span class="comment">#查看标签信息和与之对应的提交信息</span></span><br><span class="line">git push origin v1.5  <span class="comment">#推送tag</span></span><br><span class="line">git push origin --tags <span class="comment">#批量推送</span></span><br><span class="line">git tag -d v1.4-lw    <span class="comment">#删除本地tag </span></span><br><span class="line">git push origin --delete &lt;tagname&gt; <span class="comment">#删除远程tags</span></span><br></pre></td></tr></table></figure>



<h1 id="十四、git-blame"><a href="#十四、git-blame" class="headerlink" title="十四、git blame"></a>十四、git blame</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看某个文件的每一行内容由谁所写</span></span><br><span class="line">git blame 文件名 -L a,b</span><br><span class="line"><span class="comment">#如果只查文件中某一部分由谁所写</span></span><br><span class="line">git blame 文件名 | grep <span class="string">&quot;查找词&quot;</span></span><br><span class="line"><span class="comment">#有时你想搜索和新增或删除某行代码相关的commit</span></span><br><span class="line">git <span class="built_in">log</span> -S <span class="string">&quot;Hello,World!&quot;</span></span><br><span class="line"><span class="comment">#如果你想使用正则表达式去匹配而不是字符串, 那么你可以使用-G代替-S.</span></span><br><span class="line">git <span class="built_in">log</span> -G </span><br></pre></td></tr></table></figure>



<h1 id="十五、Git配置多个SSH-Key"><a href="#十五、Git配置多个SSH-Key" class="headerlink" title="十五、Git配置多个SSH-Key"></a>十五、Git配置多个SSH-Key</h1><blockquote>
<p>背景</p>
<p>当有多个git账号时，比如：</p>
<p>a. 一个gitee，用于公司内部的工作开发；<br>b. 一个github，用于自己进行一些开发活动；</p>
</blockquote>
<ul>
<li>解决方法</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成一个公司用的SSH-Key</span></span><br><span class="line">ssh-keygen -t rsa -C  <span class="string">&quot;gaoxiong@cestc.cn&quot;</span> -f ~/.ssh/cestc_id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成一个github用的SSH-Key</span></span><br><span class="line">ssh-keygen -t rsa -C  <span class="string">&quot;304148116@qq.com&quot;</span> -f ~/.ssh/github_id_rsa</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在 ~/.ssh 目录下新建一个config文件，添加如下内容（其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cestc</span></span><br><span class="line">Host cestc.cn</span><br><span class="line">HostName code.cestc.cn</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/cestc_id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github_id_rsa</span><br></pre></td></tr></table></figure>

<blockquote>
<p>用ssh命令分别测试</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -T git@code.cestc.cn</span><br><span class="line"></span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>



<h1 id="十六、其他情况"><a href="#十六、其他情况" class="headerlink" title="十六、其他情况"></a>十六、其他情况</h1><h2 id="1、直接pull主机的分支，覆盖本地"><a href="#1、直接pull主机的分支，覆盖本地" class="headerlink" title="1、直接pull主机的分支，覆盖本地"></a>1、直接pull主机的分支，覆盖本地</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch &lt;远程主机名&gt; &lt;分支名&gt;         <span class="comment"># 获取最新代码  生成FETCH_HEAD</span></span><br><span class="line"></span><br><span class="line">git reset --hard &lt;远程主机名&gt;/&lt;分支名&gt;  <span class="comment"># 回滚到最新的代码</span></span><br><span class="line"></span><br><span class="line">git fetch --all &amp;&amp; git reset --hard origin/master &amp;&amp; git pull</span><br></pre></td></tr></table></figure>

<h2 id="2、HEAD-detached"><a href="#2、HEAD-detached" class="headerlink" title="2、HEAD detached"></a>2、HEAD detached</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#也可以直接脱离分支指向当前节点</span></span><br><span class="line">git checkout 节点哈希值</span><br><span class="line">git checkout --detach</span><br><span class="line"></span><br><span class="line"><span class="comment">#追加到之前的提交，不新增加一个节点。</span></span><br><span class="line">git add .</span><br><span class="line">git commit --amend (追加提交)</span><br><span class="line"></span><br><span class="line"><span class="comment">#我当前所处的位置是在HEAD detached from bdcfe3d8上</span></span><br><span class="line">git branch temp bdcfe3d8</span><br><span class="line">git checkout master</span><br><span class="line">git merge temp</span><br><span class="line">git branch -d temp</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3、Another-git-process-seems-to-be-running-in-this-repository"><a href="#3、Another-git-process-seems-to-be-running-in-this-repository" class="headerlink" title="3、Another git process seems to be running in this repository"></a>3、Another git process seems to be running in this repository</h2><blockquote>
<p>Another git process seems to be running in this repository, e.g.<br>an editor opened by ‘git commit’. Please make sure all processes<br>are terminated then try again. If it still fails, a git process<br>may have crashed in this repository earlier:<br>remove the file manually to continue.</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除./.git/index.lock文件</span></span><br><span class="line"><span class="built_in">rm</span> -f ./.git/index.lock</span><br></pre></td></tr></table></figure>



<h2 id="4、安装更新git"><a href="#4、安装更新git" class="headerlink" title="4、安装更新git"></a>4、安装更新git</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git --version  </span><br><span class="line"></span><br><span class="line">brew install git</span><br></pre></td></tr></table></figure>



<h2 id="5、How-to-get-rid-of-“would-clobber-existing-tag”"><a href="#5、How-to-get-rid-of-“would-clobber-existing-tag”" class="headerlink" title="5、How to get rid of “would clobber existing tag”"></a>5、<a href="https://stackoverflow.com/questions/58031165/how-to-get-rid-of-would-clobber-existing-tag">How to get rid of “would clobber existing tag”</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch --tags -f</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
